#!/usr/bin/env bash
# vim: ft=sh
set -e

BENCHMARK_FILE_NAME="{{ nimbus_eth1_benchmark_file_name }}"
BENCHMARK_GIT_REPO="{{ nimbus_eth1_benchmark_git_repo_dir }}"
NIMBUS_ETH1_GIT_REPO="{{ nimbus_eth1_repo_path }}"
ENVIRONMENT_LOG_FILE_NAME="{{ nimbus_eth1_environment_log_file_name }}"
BENCHMARKING_FILE_PATH="${BENCHMARK_GIT_REPO}/${BENCHMARK_FILE_NAME}"
ISO_TIMESTAMP=$(date +"%Y%m%dT%H%M%S")
GIT_HASH=$(cd "${NIMBUS_ETH1_GIT_REPO}" && git rev-parse --short HEAD)
BENCHMARKING_TYPE="{{ nimbus_eth1_benchmark_type }}"
BENCHMARK_DESTINATION="${BENCHMARK_GIT_REPO}/${BENCHMARKING_TYPE}-benchmark/${ISO_TIMESTAMP}_${GIT_HASH}"
ENVIRONMENT_LOG_FILE_PATH="${BENCHMARK_DESTINATION}/${ENVIRONMENT_LOG_FILE_NAME}"
BENCHMARKING_SERVICE_LOG_FILE_NAME="{{ nimbus_eth1_service_log_output_name }}"
BENCHMARKING_SERVICE_OUTPUT_LOG_FILE="{{ nimbus_eth1_benchmark_log_output_file_path }}"
NIMBUS_ETH1_BLOCKS_IMPORT_SCRIPT_PATH="{{ nimbus_eth1_blocks_import_script_path }}"
LATEST_BENCHMARKED_CSV_DIRECTORY=$(find "${BENCHMARK_GIT_REPO}/${BENCHMARKING_TYPE}-benchmark" -maxdepth 1 -type d -printf '%T@ %f\n' 2>/dev/null | sort -nr | head -n 1 | cut -d' ' -f2)
LATEST_BENCHMARKED_CSV_FILE_PATH="${BENCHMARK_GIT_REPO}/${BENCHMARKING_TYPE}-benchmark/${LATEST_BENCHMARKED_CSV_DIRECTORY}/${BENCHMARK_FILE_NAME}"


function log() {
   echo "$(date '+%Y-%m-%d %H:%M:%S') - $*"
}

function convert_to_human_readable() {
  local total_ns=$1

  # Convert to seconds with decimal precision
  local total_seconds=$(awk "BEGIN {printf \"%.2f\", $total_ns/1000000000}")

  # Convert to integer seconds for calculations
  local seconds_int=${total_seconds%.*}
  local days=$(( seconds_int / 86400 ))
  local hours=$(( (seconds_int % 86400) / 3600 ))
  local minutes=$(( (seconds_int % 3600) / 60 ))
  local seconds=$(( seconds_int % 60 ))

  # For printing in human readable string
  local result=""
  [[ $days -gt 0 ]] && result+="$days days "
  [[ $hours -gt 0 ]] && result+="$hours hours "
  [[ $minutes -gt 0 ]] && result+="$minutes minutes "
  [[ $seconds -gt 0 ]] && result+="$seconds seconds"

  # Trim extra spaces and handle empty result
  result="${result%% }"
  [[ -z "$result" ]] && result="less than 1 second"

  echo "$result"
}

function fetchBenchmarkingJobSummary () {
  local total_time
  total_time=$(awk -F',' '
      NR>1 { # Skip header row
          sum += $6
      }
      END {
          print sum
      }' "$BENCHMARKING_FILE_PATH"
  )

  if [ -z "$total_time" ]; then
      log "Error: No data found or invalid input"
      exit 1
  fi

  echo "=== Nimbus-ETH1 Benchmarking Report ==="
  echo ">>> Total time spent in benchmarking (nanoseconds): ${total_time}"
  echo ">>> Total time spent in benchmarking (human readable format): $(convert_to_human_readable "$total_time")"

  # start block number is column[0] - column[1]
  START_BLOCK_NUMBER=$(tail -n +2 "${BENCHMARKING_FILE_PATH}" | head -1 | awk -F',' '{print $1 - $2}')
  echo ">>> Start block number is ${START_BLOCK_NUMBER}"

  END_BLOCK_NUMBER=$(tail -1 "${BENCHMARKING_FILE_PATH}" | cut -d',' -f1)
  echo ">>> End block number is ${END_BLOCK_NUMBER}"

  BENCHMARK_RUN_COMMAND=$(systemctl cat nimbus-eth1-mainnet-master-short-benchmark.service | sed -n '/^ExecStart=/,/[^\\]$/p' | sed 's/^ExecStart=//')
  echo ">>> Benchmarking was run using ${BENCHMARK_RUN_COMMAND}"
  echo "=========================="
}

function moveBenchmarkingFileToRepo() {
  log ">>> starting moveBenchmarkingFileToRepo() inside publish-metrics-github.sh"

  log ">>> creating directory ${BENCHMARK_DESTINATION}"
  mkdir -p "${BENCHMARK_DESTINATION}"

  log ">>> copying debug-csv generated by nimbus to benchmarks repo"
  log "cp ${BENCHMARKING_FILE_PATH} ${BENCHMARK_DESTINATION}/${BENCHMARK_FILE_NAME}"
  cp "${BENCHMARKING_FILE_PATH}" "${BENCHMARK_DESTINATION}/${BENCHMARK_FILE_NAME}"

  log ">>> completed moveBenchmarkingFileToRepo()"
}

function fetchHostInformation () {
  echo "=== System Information Report ==="
  echo ">>> Generated on: $(date)"
  echo "=========================="

  echo -n ">>> CPU Architecture: "
  lscpu | grep "Architecture" | awk '{print $2}'

  echo -n ">>> CPU Byte Order: "
  lscpu | grep "Byte Order" | sed 's/Byte Order://' | sed 's/^[ \t]*//'

  echo -n ">>> CPU Cores: "
  nproc

  echo -n ">>> CPU Model: "
  lscpu | grep "Model name" | sed 's/Model name://' | sed 's/^[ \t]*//'

  echo ">>> CPU Cache Information:"
  echo -n "L1d Cache: "
  lscpu | grep "L1d" | sed 's/L1d cache://' | sed 's/^[ \t]*//'
  echo -n "L1i Cache: "
  lscpu | grep "L1i" | sed 's/L1i cache://' | sed 's/^[ \t]*//'
  echo -n "L2 Cache: "
  lscpu | grep "L2" | sed 's/L2 cache://' | sed 's/^[ \t]*//'
  echo -n "L3 Cache: "
  lscpu | grep "L3" | sed 's/L3 cache://' | sed 's/^[ \t]*//'

  echo -n ">>> RAM Size: "
  free -h | grep "Mem:" | awk '{print $2}'

  echo ">>> Hard Disk Information:"
  df -h | grep '^/dev/' | awk '{print $1 " : " $2 " total, " $4 " free"}'
  echo "=========================="
}

function compareBenchmarkWithPrevious() {
  log "=== Comparison of last two benchmarks ==="

  CURRENT_BENCHMARK_TYPE_DIR="${BENCHMARK_GIT_REPO}/${BENCHMARKING_TYPE}-benchmark"

  if [ ! -d "${CURRENT_BENCHMARK_TYPE_DIR}" ]; then
    log "${CURRENT_BENCHMARK_TYPE_DIR} does not exist, skipping compareBenchmarkWithPrevious()"
    exit
  fi

  if [[ ! "$(find "${CURRENT_BENCHMARK_TYPE_DIR}" -mindepth 1 -maxdepth 1 -type d | wc -l)" -gt 2 ]]; then
      log "${CURRENT_BENCHMARK_TYPE_DIR} does not contain 2 or more benchmark CSVs, skipping compareBenchmarkWithPrevious()"
      exit
  fi

  CURRENT_BENCHMARK_DIR_NAME=$(find "${CURRENT_BENCHMARK_TYPE_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%T@ %f\n' 2>/dev/null | sort -nr | head -n 1 | cut -d' ' -f2)
  PREVIOUS_BENCHMARK_DIR_NAME=$(find "${CURRENT_BENCHMARK_TYPE_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%T@ %f\n' 2>/dev/null | sort -nr | head -n 2 | tail -n 1 | cut -d' ' -f2)


  CURRENT_BENCHMARK_CSV_PATH="${CURRENT_BENCHMARK_TYPE_DIR}/${CURRENT_BENCHMARK_DIR_NAME}/${BENCHMARK_FILE_NAME}"
  PREVIOUS_BENCHMARK_CSV_PATH="${CURRENT_BENCHMARK_TYPE_DIR}/${PREVIOUS_BENCHMARK_DIR_NAME}/${BENCHMARK_FILE_NAME}"

  log "python ${NIMBUS_ETH1_BLOCKS_IMPORT_SCRIPT_PATH} ${CURRENT_BENCHMARK_CSV_PATH} ${PREVIOUS_BENCHMARK_CSV_PATH} 2>&1 || true"

  python "${NIMBUS_ETH1_BLOCKS_IMPORT_SCRIPT_PATH}" "${CURRENT_BENCHMARK_CSV_PATH}" "${PREVIOUS_BENCHMARK_CSV_PATH}" 2>&1 || true

  log "=========================="
}

function moveServiceLogToRepo() {
  # we intentionally log before we execute because we want these 4 commands to be part of the logs before we reset them
  log ">>> copying import systemd service log file to benchmarks repo"
  log "cp ${BENCHMARKING_SERVICE_OUTPUT_LOG_FILE} ${BENCHMARK_DESTINATION}/${BENCHMARKING_SERVICE_LOG_FILE_NAME}"
  log ">>> truncating import systemd service log file"
  log "cat /dev/null > ${BENCHMARKING_SERVICE_OUTPUT_LOG_FILE}"

  cp "${BENCHMARKING_SERVICE_OUTPUT_LOG_FILE}" "${BENCHMARK_DESTINATION}/${BENCHMARKING_SERVICE_LOG_FILE_NAME}"
  # we can't delete this file since its needed for next runs
  cat /dev/null > "${BENCHMARKING_SERVICE_OUTPUT_LOG_FILE}"
}

function generateBenchmarkSummary() {
  touch "${ENVIRONMENT_LOG_FILE_PATH}"
   {
        fetchHostInformation
        fetchBenchmarkingJobSummary
        compareBenchmarkWithPrevious
   } >> "${ENVIRONMENT_LOG_FILE_PATH}" 2>&1

   moveServiceLogToRepo
}

function pushChangesToRepo() {
  cd "${BENCHMARK_DESTINATION}"
  git add .
  git commit -m "{{ nimbus_eth1_benchmark_publish_commit_message }}" > /dev/null 2>&1
  git push > /dev/null 2>&1
}

moveBenchmarkingFileToRepo
generateBenchmarkSummary
pushChangesToRepo



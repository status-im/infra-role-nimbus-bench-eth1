#!/usr/bin/env bash
# vim: ft=sh
set -e

BENCHMARK_FILE_NAME="{{ nimbus_eth1_benchmark_file_name }}"
BENCHMARK_GIT_REPO="{{ nimbus_eth1_benchmark_git_repo_dir }}"
ENVIRONMENT_LOG_FILE_NAME="{{ nimbus_eth1_environment_log_file_name }}"
BENCHMARKING_FILE_PATH="${BENCHMARK_GIT_REPO}/${BENCHMARK_FILE_NAME}"
ISO_TIMESTAMP=$(date +"%Y%m%dT%H%M%S")
GIT_HASH=$(cd "${BENCHMARK_GIT_REPO}" && git rev-parse --short HEAD)
BENCHMARK_DESTINATION="${BENCHMARK_GIT_REPO}/short-benchmark/${ISO_TIMESTAMP}_${GIT_HASH}"
ENVIRONMENT_LOG_FILE_PATH="${BENCHMARK_DESTINATION}/${ENVIRONMENT_LOG_FILE_NAME}"
BENCHMARKING_SERVICE_LOG_FILE_NAME="{{ nimbus_eth1_service_log_output_name }}"
BENCHMARKING_SERVICE_ERROR_FILE_NAME="{{ nimbus_eth1_service_log_error_name }}"
BENCHMARKING_SERVICE_OUTPUT_LOG_FILE="{{ nimbus_eth1_benchmark_log_output_file_path }}"
BENCHMARKING_SERVICE_ERROR_LOG_FILE="{{ nimbus_eth1_benchmark_log_error_file_path }}"

function fetchChanges() {
    echo " >>> Fetching latest changes from nimbus-eth1-benchmarks repo..."
    # We cannot use "git pull" in here, because history may be changed upstream
    cd "${BENCHMARK_GIT_REPO}"
    git fetch
    git reset --hard "origin/master"
    cd -
}

function convert_to_human_readable() {
    local total_ns=$1

    # Convert to seconds with decimal precision
    local total_seconds=$(awk "BEGIN {printf \"%.2f\", $total_ns/1000000000}")

    # Convert to integer seconds for calculations
    local seconds_int=${total_seconds%.*}
    local days=$(( seconds_int / 86400 ))
    local hours=$(( (seconds_int % 86400) / 3600 ))
    local minutes=$(( (seconds_int % 3600) / 60 ))
    local seconds=$(( seconds_int % 60 ))

    # For printing in human readable string
    local result=""
    [[ $days -gt 0 ]] && result+="$days days "
    [[ $hours -gt 0 ]] && result+="$hours hours "
    [[ $minutes -gt 0 ]] && result+="$minutes minutes "
    [[ $seconds -gt 0 ]] && result+="$seconds seconds"

    # Trim extra spaces and handle empty result
    result="${result%% }"
    [[ -z "$result" ]] && result="less than 1 second"

    echo "$result"
}

function fetchBenchmarkingJobSummary () {

  local total_time
  total_time=$(awk -F',' '
      NR>1 { # Skip header row
          sum += $6
      }
      END {
          print sum
      }' "$BENCHMARKING_FILE_PATH"
  )

  if [ -z "$total_time" ]; then
      echo "Error: No data found or invalid input"
      exit 1
  fi

  echo "=== Nimbus-ETH1 Benchmarking Report ==="
  echo ">>> Total time spent in benchmarking (nanoseconds): ${total_time}"
  echo ">>> Total time spent in benchmarking (human readable format): $(convert_to_human_readable "$total_time")"

  END_BLOCK_NUMBER=$(tail -1 "${BENCHMARKING_FILE_PATH}" | cut -d',' -f1)
  echo ">>> End block number is ${END_BLOCK_NUMBER}"

  START_BLOCK_NUMBER=$(tail -n +2 "${BENCHMARKING_FILE_PATH}" | head -1 | cut -d',' -f1)
  echo ">>> Start block number is ${START_BLOCK_NUMBER}"

  BENCHMARK_RUN_COMMAND=$(systemctl cat nimbus-eth1-mainnet-master-short-benchmark.service | sed -n '/^ExecStart=/,/[^\\]$/p' | sed 's/^ExecStart=//')
  echo ">>> Benchmarking was run using ${BENCHMARK_RUN_COMMAND}"
  echo "=========================="
}

function moveBenchmarkingFileToRepo() {
  mkdir -p "${BENCHMARK_DESTINATION}"

  echo ">>> copying benchmarking file to repo"
  cp "${BENCHMARKING_FILE_PATH}" "${BENCHMARK_DESTINATION}/${BENCHMARK_FILE_NAME}"

  echo ">>> copying service output log file to repo"
  cp "${BENCHMARKING_SERVICE_OUTPUT_LOG_FILE}" "${BENCHMARK_DESTINATION}/${BENCHMARKING_SERVICE_LOG_FILE_NAME}"

  echo ">>> copying service error log file to repo"
  cp "${BENCHMARKING_SERVICE_ERROR_LOG_FILE}" "${BENCHMARK_DESTINATION}/${BENCHMARKING_SERVICE_ERROR_FILE_NAME}"
}

function fetchHostInformation () {
  echo "=== System Information Report ==="
  echo ">>> Generated on: $(date)"
  echo "=========================="

  echo -n ">>> CPU Architecture: "
  lscpu | grep "Architecture" | awk '{print $2}'

  echo -n ">>> CPU Byte Order: "
  lscpu | grep "Byte Order" | sed 's/Byte Order://' | sed 's/^[ \t]*//'

  echo -n ">>> CPU Cores: "
  nproc

  echo -n ">>> CPU Model: "
  lscpu | grep "Model name" | sed 's/Model name://' | sed 's/^[ \t]*//'

  echo ">>> CPU Cache Information:"
  echo -n "L1d Cache: "
  lscpu | grep "L1d" | sed 's/L1d cache://' | sed 's/^[ \t]*//'
  echo -n "L1i Cache: "
  lscpu | grep "L1i" | sed 's/L1i cache://' | sed 's/^[ \t]*//'
  echo -n "L2 Cache: "
  lscpu | grep "L2" | sed 's/L2 cache://' | sed 's/^[ \t]*//'
  echo -n "L3 Cache: "
  lscpu | grep "L3" | sed 's/L3 cache://' | sed 's/^[ \t]*//'

  echo -n ">>> RAM Size: "
  free -h | grep "Mem:" | awk '{print $2}'

  echo ">>> Hard Disk Information:"
  df -h | grep '^/dev/' | awk '{print $1 " : " $2 " total, " $4 " free"}'
  echo "=========================="
}

function generateBenchmarkSummary() {
  touch "${ENVIRONMENT_LOG_FILE_PATH}"
   {
        fetchHostInformation
        fetchBenchmarkingJobSummary
   } >> "${ENVIRONMENT_LOG_FILE_PATH}" 2>&1
}

function pushChangesToRepo() {
  cd "${BENCHMARK_DESTINATION}"
  git add .
  git commit -m "benchmark: publish metrics and report"
  git push
  echo " >>> Pushed benchmark csv to nimbus-eth1-benchmarks repo..."
}

fetchChanges
moveBenchmarkingFileToRepo
generateBenchmarkSummary
pushChangesToRepo



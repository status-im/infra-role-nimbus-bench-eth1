#!/usr/bin/env bash
# vim: ft=sh
set -e

REPO_URL="{{ nimbus_eth1_repo_url }}"
BRANCH="{{ nimbus_eth1_repo_branch }}"
BUILD_DIR="{{ nimbus_eth1_repo_path }}"

COMMIT_RANGE_START="{{ nimbus_eth1_commit_range_start }}"
COMMIT_RANGE_END="{{ nimbus_eth1_commit_range_end }}"
COMMIT_RANGE_STATE_FILE="{{ nimbus_eth1_service_scripts_base }}/.commit_range_state"

function cloneOrFetchRepo() {
  echo ">>> starting cloneOrFetchRepo() inside build-and-update-nimbus.sh"
  echo "mkdir -p ${BUILD_DIR}"
  echo "chmod 775 ${BUILD_DIR}"

  mkdir -p "${BUILD_DIR}"
  chmod 775 "${BUILD_DIR}"

  # Check if git repo already exists
  if [ -d "${BUILD_DIR}/.git" ]; then
    cd "${BUILD_DIR}"

    echo ">>> cleaning repo"
    echo "cd ${BUILD_DIR}"
    echo "git clean -fdx > /dev/null 2>&1"
    echo "git submodule foreach --recursive git clean -fdx > /dev/null 2>&1"

    git clean -fdx >/dev/null 2>&1
    git submodule foreach --recursive git clean -fdx >/dev/null 2>&1
    echo ">>> Fetching latest changes..."

    echo "git fetch"
    git fetch
  else
    echo ">>> Cloning repo..."
    echo "git clone -b ${BRANCH} ${REPO_URL} ${BUILD_DIR}"
    git clone -b "${BRANCH}" "${REPO_URL}" "${BUILD_DIR}"
    cd "${BUILD_DIR}"
  fi

  if [[ -n "${COMMIT_RANGE_START}" && -n "${COMMIT_RANGE_END}" ]]; then
    echo ">>> Processing commit range from ${COMMIT_RANGE_START} to ${COMMIT_RANGE_END}"

    local next_commit
    next_commit=$(getNextCommitFromRange)

    if [[ -n "${next_commit}" ]]; then
      echo ">>> Checking out commit: ${next_commit}"
      echo "git checkout ${next_commit}"
      git checkout "${next_commit}"

      echo ">>> Updating submodules for commit ${next_commit}"
      echo "git submodule update --init --recursive"
      git submodule update --init --recursive
    else
      echo ">>> All commits in range have been processed!"
      echo ">>> Switching back to branch mode"
      echo "git reset --hard origin/${BRANCH}"
      git reset --hard "origin/${BRANCH}"

      # Clean up state file
      rm -f "${COMMIT_RANGE_STATE_FILE}"
    fi
  else
    echo ">>> Using branch mode"
    echo "git reset --hard origin/${BRANCH}"
    git reset --hard "origin/${BRANCH}"
  fi

  echo ">>> completed cloneOrFetchRepo()"
}

function getNextCommitFromRange() {
  local commits_in_range
  local processed_commits
  local next_commit=""

  commits_in_range=$(git log --reverse --pretty=format:"%H" "${COMMIT_RANGE_START}..${COMMIT_RANGE_END}")

  if [[ -f "${COMMIT_RANGE_STATE_FILE}" ]]; then
    processed_commits=$(cat "${COMMIT_RANGE_STATE_FILE}")
  else
    processed_commits=""
  fi

  # Find the next unprocessed commit
  for commit in ${commits_in_range}; do
    if ! echo "${processed_commits}" | grep -q "${commit}"; then
      next_commit="${commit}"
      break
    fi
  done

  if [[ -n "${next_commit}" ]]; then
    echo "${next_commit}" >> "${COMMIT_RANGE_STATE_FILE}"
  fi

  echo "${next_commit}"
}

function buildBinaries() {
  echo ">>> starting buildBinaries()"
  echo "cd ${BUILD_DIR}"

  cd "${BUILD_DIR}"
  COMMIT=$(git rev-parse --short=8 HEAD)

  if [[ -f "build/nimbus_execution_client_${COMMIT}" ]]; then
    echo ">>> Binaries already exist for commit ${COMMIT}, no need to build a new nimbus binary!"
    return
  fi

  echo ">>> Building binaries for commit ${COMMIT}..."

  echo "make -j{{ ansible_processor_vcpus }} update"
  make -j{{ ansible_processor_vcpus }} update

  echo "make -j{{ ansible_processor_vcpus }} nimbus_execution_client LOG_LEVEL={{ nimbus_eth1_log_level }} NIMFLAGS={{ nimbus_eth1_build_nim_flags | join(" ") }}"
  make -j{{ ansible_processor_vcpus }} nimbus_execution_client \
    LOG_LEVEL="{{ nimbus_eth1_log_level }}" NIMFLAGS="{{ nimbus_eth1_build_nim_flags | join(" ") }}"

  # Rename binaries to match commit they were built from.
  echo ">>> renaming binaries to match commit they were built from"
  echo "mv build/nimbus_execution_client build/nimbus_execution_client_${COMMIT}"
  mv "build/nimbus_execution_client" "build/nimbus_execution_client_${COMMIT}"

  # Create a symbolic link to the latest version
  echo ">>> creating a symbolic link to the latest version"
  echo "ln -frs build/nimbus_execution_client_${COMMIT} build/nimbus_execution_client"
  ln -frs build/nimbus_execution_client_${COMMIT} build/nimbus_execution_client

  # Delete copies that are older than N days
  echo ">>> deleting copies that are older than N days"
  echo "find build -mtime +{{ nimbus_eth1_build_days_kept }} -exec rm '{}' \+"
  find build -mtime +{{ nimbus_eth1_build_days_kept }} -exec rm '{}' \+

  echo ">>> buildBinaries() complete"
}

cloneOrFetchRepo
buildBinaries
